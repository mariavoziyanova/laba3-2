#pragma once

#include <algorithm>
#include <fstream>
#include <iostream>
#include <random>
#include <set>
#include <vector>

#include "arraysequence.h"
#include "common.hpp"
#include "sequence.h"

using namespace std;

// –ü—É—Å—Ç—å –∏–º–µ–µ—Ç—Å—è –¥–≤—É—Ö–º–µ—Ä–Ω—ã–π —Ä—é–∫–∑–∞–∫ (—Å–º. –ø—Ä–∏–º–µ—Ä –Ω–∞ —Ä–∏—Å. –Ω–∏–∂–µ) –∏ –Ω–∞–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤
// (–∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–Ω–∏–º–∞–µ—Ç –≤ —Ä—é–∫–∑–∞–∫–µ —Å–∫–æ–ª—å–∫–æ-—Ç–æ –º–µ—Å—Ç–æ.
// –ö–∞–∂–¥—ã–π –ø—Ä–µ–¥–º–µ—Ç, –∫—Ä–æ–º–µ —Ä–∞–∑–º–µ—Ä–æ–≤, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è –≤–µ—Å–æ–º –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é.
// –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ä—é–∫–∑–∞–∫–∞, —á—Ç–æ–±—ã:
// a) —Å—É–º–º–∞—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —Ä—é–∫–∑–∞–∫–µ –±—ã–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π,
//   –∞ —Å—É–º–º–∞—Ä–Ω—ã–π –æ–±—ä–µ–º ‚Äì –Ω–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏–ª –∑–∞–¥–∞–Ω–Ω–æ–π –≤–µ–ª–∏—á–∏–Ω—ã –æ–±—ä–µ–º–∞ —Ä—é–∫–∑–∞–∫–∞
//   (—Å—á–∏—Ç–∞–µ—Ç—Å—è, —á—Ç–æ —Ñ–æ—Ä–º–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è)
// b) —Å—É–º–º–∞—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —Ä—é–∫–∑–∞–∫–µ –±—ã–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π,
// –∞ –æ–±—ä–µ–º –∏ –º–∞—Å—Å–∞ –Ω–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—è—Ç –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤–µ–ª–∏—á–∏–Ω
// c) —Å—É–º–º–∞—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —Ä—é–∫–∑–∞–∫–µ –±—ã–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π,
//   –Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –≥—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å (—Å—É–º–º–∞—Ä–Ω—ã–π –≤–µ—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç—å –∑–∞–¥–∞–Ω–Ω–æ–π –≤–µ–ª–∏—á–∏–Ω—ã)
//   –∏ —Å–ª–µ–¥—É–µ—Ç –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ä—é–∫–∑–∞–∫ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ (Œîùëâ5=0 –∏–ª–∏ Œîùëâ‚â§ùúÄ)
// d) —Å—É–º–º–∞—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —Ä—é–∫–∑–∞–∫–µ –±—ã–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π,
//   –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä—é–∫–∑–∞–∫–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º (–ø—Ä–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏),
//   –Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –≥—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å (—Å—É–º–º–∞—Ä–Ω—ã–π –≤–µ—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç—å –∑–∞–¥–∞–Ω–Ω–æ–π –≤–µ–ª–∏—á–∏–Ω—ã)
// e) —Å—É–º–º–∞—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —Ä—é–∫–∑–∞–∫–µ –±—ã–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π,
//   –∞ —Å—É–º–º–∞—Ä–Ω—ã–π –≤–µ—Å ‚Äì –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º (–ø—Ä–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
// –ü—Ä–∏ —ç—Ç–æ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–º–µ—â–∞—Ç—å—Å—è –≤ —Ä—é–∫–∑–∞–∫–µ.

// –ü—Ä–µ–¥–º–µ—Ç –¥–ª—è —Ä—é–∫–∑–∞–∫–∞
struct Item {
  int weight;            // –í–µ—Å –ø—Ä–µ–¥–º–µ—Ç–∞
  int price;             // –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∞
  vector<string> shape;  // –§–æ—Ä–º–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
  Item(int weight, int price) : weight(weight), price(price) {}

  friend wostream &operator<<(wostream &os, const Item &x);
};

wostream &operator<<(wostream &os, const Item &x) {
  os << L"Item weight " << x.weight << L" price " << x.price << endl;
  for (auto &s : x.shape) {
    os << toWS(s) << endl;
  }
  return os;
}

// –†—é–∫–∑–∞–∫ (–ø—É—Å—Ç–æ–π/—á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π/–ø–æ–ª–Ω–æ—Å—Ç—å—é)
struct BackPack {
  vector<string> shape;  // –§–æ—Ä–º–∞ —Ä—é–∫–∑–∞–∫–∞
  int weight = 0;        // –í–µ—Å
  int price = 0;         // –°—Ç–æ–∏–º–æ—Å—Ç—å

  BackPack() : shape(), weight(0), price(0) {}

  BackPack(const vector<string> &shape, int weight, int price) : shape(shape), weight(weight), price(price) {}

  ~BackPack() = default;

  inline friend bool operator<(const BackPack &a, const BackPack &b) {
    if (a.price == b.price)
      return a.weight < b.weight;
    else
      return a.price < b.price;
  }

  friend wostream &operator<<(wostream &os, const BackPack &x);
};

wostream &operator<<(wostream &os, const BackPack &x) {
  os << L"BackPack weight " << x.weight << L" price " << x.price << endl;
  for (auto &s : x.shape) {
    os << toWS(s) << endl;
  }
  return os;
}

// –§–æ—Ä–º–∞ —Ñ–∏–≥—É—Ä—ã - –≤–µ–∫—Ç–æ—Ä —Å—Ç—Ä–æ–∫
typedef vector<string> Shape;

void printShape(const Shape &shape) {
  for (auto &s : shape) {
    wcout << toWS(s) << endl;
  }
}

Shape rotate(const vector<string> &box, int width, int height) {
  // #
  // ###
  //
  // ##
  // #
  // #
  Shape rot(width);
  for (int i = 0; i < rot.size(); i++) {  // –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –æ—Å–∏ x, –Ω–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ —ç—Ç–æ –±—ã–≤—à–∞—è —Å—Ç—Ä–æ–∫–∞
    rot[i].resize(height);
    for (int j = 0; j < height; j++) rot[i][j] = box[height - j - 1][i];
  }

  return rot;
};

Shape mirror(const vector<string> &box, int width, int height) {
  // ##     ##
  // #   ->  #
  // #       #
  Shape rot(height);
  for (int i = 0; i < height; i++) {  // –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –æ—Å–∏ x, –Ω–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ —ç—Ç–æ –±—ã–≤—à–∞—è —Å—Ç—Ä–æ–∫–∞
    rot[i].resize(width);
    for (int j = 0; j < width; j++) rot[i][j] = box[i][width - j - 1];
  }
  return rot;
};

// –§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø–æ–≤–æ—Ä–æ—Ç—ã –∏ –æ—Ç—Ä–∞–∂–µ–Ω–∏—è
set<Shape> genAllRotations(const Shape &shape) {
  // –°—á–∏—Ç–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∏–≥—É—Ä—ã (–æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫)
  int height = shape.size();
  int width = 0;
  for (auto &s : shape) width = std::max(width, int(s.size()));

  Shape box(height);  // –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
  for (int i = 0; i < height; i++) {
    box[i].resize(width, ' ');
    for (int j = 0; j < shape[i].size(); j++) box[i][j] = shape[i][j];
  }

  set<Shape> res;  // —É–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã

  // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∏–≥—É—Ä—É –∫–∞–∫ –µ—Å—Ç—å
  res.insert(Shape(box));

  Shape rot(box);
  Shape mirror_rot = mirror(box, width, height);
  res.insert(mirror_rot);
  int rot_width = width, rot_height = height;
  for (int idx = 0; idx < 3; idx++) {
    rot = rotate(rot, rot_width, rot_height);
    mirror_rot = rotate(mirror_rot, rot_width, rot_height);
    res.insert(rot);
    res.insert(mirror_rot);
    swap(rot_width, rot_height);
  }

  return res;
}

// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª–æ–∂–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ —Ä—é–∫–∑–∞–∫ —Å–æ —Å–º–µ—â–µ–Ω–∏–µ–º
// –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ –ª–µ–≤–æ–≥–æ —É–≥–ª–∞ —Ä—é–∫–∑–∞–∫–∞
// item - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
// bp - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—é–∫–∑–∞–∫–∞
// rowOffset - —Å–º–µ—â–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–æ—á–∫–∞–º –≤–Ω—É—Ç—Ä–∏ —Ä—é–∫–∑–∞–∫–∞
// colOffset - —Å–º–µ—â–µ–Ω–∏–µ –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º –≤–Ω—É—Ç—Ä–∏ —Ä—é–∫–∑–∞–∫–∞
// symbol - —Å–∏–º–≤–æ–ª, –∫–æ—Ç–æ—Ä—ã–º —Ä–∏—Å–æ–≤–∞—Ç—å —Ñ–∏–≥—É—Ä—É
bool tryPutItem(const vector<string> &item, vector<string> &bp, int rowOffset, int colOffset, char symbol) {
  for (int r = 0; r < item.size(); r++) {
    for (int c = 0; c < item[r].size(); c++) {
      // –ï—Å–ª–∏ –≤ —ç—Ç–æ–º –º–µ—Å—Ç–µ –µ—Å—Ç—å –ø–∏–∫—Å–µ–ª—å —É –ø—Ä–µ–¥–º–µ—Ç–∞
      if (item[r][c] == '@') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ –≤ —Ä—é–∫–∑–∞–∫–µ
        int row = rowOffset + r;
        int col = colOffset + c;
        if (row >= bp.size() || col >= bp[row].size() || bp[row][col] != '_') {
          return false;  // –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–æ—Ç–æ–º—É —á—Ç–æ –∫–ª–µ—Ç–∫–∞ –∑–∞–Ω—è—Ç–∞
        }
        bp[row][col] = symbol;
      }
    }
  }
  return true;  // –£–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å
}

class BackPackSearch {
 public:
  BackPack bp;
  bool leaf = false;  // —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∑–µ–ª –ª–∏—Å—Ç–æ–º –∏–ª–∏ –Ω–µ—Ç
  BackPackSearch(const BackPack &backPack, bool leaf) : bp(backPack), leaf(leaf) {}
};

// –î–µ—Ä–µ–≤–æ —Ä–µ—à–µ–Ω–∏–π
class SolutionTree {
 public:
  BackPack backPack;

 private:
  struct Node {
    BackPack bp;
    Node *parent;
    vector<Node *> child;  /// —É–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞ –¥–µ—Ç–µ–π
    vector<int> keys;  /// –∏–Ω–¥–µ–∫—Å—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è –≤ —Ä—é–∫–∑–∞–∫–µ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ –ø–æ—Ä—è–¥–∫—É
    bool leaf = false;  /// —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∑–µ–ª –ª–∏—Å—Ç–æ–º –∏–ª–∏ –Ω–µ—Ç

    /// –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è root
    Node(const BackPack &backpack, set<BackPack> &solutions, const vector<Item *> &items)
        : bp(backpack), parent(nullptr), keys() {
      child.reserve((items.size() - keys.size()) * 5);
      solve(solutions, items);
    }

    /// –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä
    ~Node() {
      for (Node *n : child) {
        delete n;
      }
    }

    Node(const BackPack &backpack, Node *parent_, const vector<int> &parent_keys, int new_key, set<BackPack> &solutions,
         const vector<Item *> &items)
        : bp(backpack), parent(parent_), keys(parent_keys) {
      auto it = lower_bound(keys.begin(), keys.end(), new_key);
      keys.insert(it, new_key);
      if (!is_sorted(keys.begin(), keys.end())) throw runtime_error("Error");

      if (keys.size() == items.size()) {
        leaf = true;
        solutions.insert(bp);
      } else {
        child.reserve((items.size() - keys.size()) * 5);
        solve(solutions, items);
      }
    }

    void solve(set<BackPack> &solutions, const vector<Item *> &items) {
      int idx = 0;
      for (int i = 0; i < items.size(); i++) {
        if (idx < keys.size() && i == keys[idx]) {
          idx++;
          continue;
        }

        set<Shape> shapes = genAllRotations(items[i]->shape);
        for (auto &shape : shapes) {
          for (int row = 0; row < bp.shape.size(); row++) {
            for (int col = 0; col < bp.shape[row].size(); col++) {
              if (bp.shape[row][col] == '#') continue;

              // –ü—Ä–æ–±—É–µ–º –ø–æ–ª–æ–∂–∏—Ç—å —Ñ–∏–≥—É—Ä—É –Ω–∞—á–∏–Ω–∞—è —Å –∫–ª–µ—Ç–∫–∏ —Ä—é–∫–∑–∞–∫–∞ row col
              vector<string> newBP(bp.shape);  // –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
              if (tryPutItem(shape, newBP, row, col, char('1' + i))) {
                BackPack nbp = BackPack(newBP, bp.weight + items[i]->weight, bp.price + items[i]->price);

                Node *chd = new Node(nbp, this, keys, i, solutions, items);
                child.emplace_back(chd);
              }
            }
          }
        }
      }
      if (child.empty()) {
        leaf = true;
        solutions.insert(bp);
      }
    }

    vector<BackPackSearch> search(int price) {
      vector<BackPackSearch> res;
      for (auto node : child) {
        // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–ª—é—á —Ä–∞–≤–µ–Ω k, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —ç—Ç–æ—Ç —É–∑–µ–ª
        if (node->bp.price == price) res.emplace_back(BackPackSearch(node->bp, node->leaf));
        if (node->bp.price > price) break;
        auto childRes = node->search(price);
        res.insert(std::end(res), std::begin(childRes), std::end(childRes));
      }
      return res;
    }
  };

 public:
  Node *root;

  explicit SolutionTree(const BackPack &bp) : backPack(bp) {}

  set<BackPack> solve(const vector<Item *> &items) {
    set<BackPack> solutions;
    root = new Node(backPack, solutions, items);
    return solutions;
  }

  ~SolutionTree() { delete root; }

  vector<BackPackSearch> search(int price) const {
    if (root) {
      return root->search(price);
    }
    return vector<BackPackSearch>();
  }
};

/// –ß—Ç–µ–Ω–∏–µ —Ä—é–∫–∑–∞–∫–∞ –∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
class Config {
 public:
  BackPack backPack;
  vector<Item *> items;
  int maxWeight = 0;

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä—é–∫–∑–∞–∫–∞ –∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —Ä—é–∫–∑–∞–∫–µ
  explicit Config(const char *fileName) {
    ifstream input(fileName);
    if (!input.is_open()) {
      wcout << L"Can't open file " << fileName << endl;
      throw string("Can't open file");
    }
    // –°—á–∏—Ç—ã–≤–∞–µ–º —Ä—é–∫–∑–∞–∫
    string s;
    input >> maxWeight;
    getline(input, s);  // Skip "end of line"
    getline(input, s);
    while (!s.empty()) {
      backPack.shape.push_back(s);
      getline(input, s);
    }
    // –°—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —É–∫–ª–∞–¥–∫–∏
    int weight, price;
    while (input >> weight >> price) {  // –ü–æ–∫–∞ –Ω–µ –∫–æ–Ω—á–∏–ª—Å—è —Ñ–∞–π–ª
      Item *item = new Item(weight, price);
      item->weight = weight;
      item->price = price;
      getline(input, s);
      getline(input, s);           // –°—á–∏—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É —Ä–∏—Å—É–Ω–∫–∞ —Ñ–∏–≥—É—Ä—ã
      while (!s.empty()) {         // –ï—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è
        item->shape.push_back(s);  // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—Ä–∞–∑ —Ñ–∏–≥—É—Ä—ã
        getline(input, s);         // –ò —á–∏—Ç–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ—á–∫—É
      }
      items.emplace_back(item);  // –î–æ–±–∞–≤–ª—è–µ–º
      // wcout << *item << endl; // –í—ã–≤–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      input.peek();
    }
  }
};

int solveBackpack(const char *fileName) {
  ifstream input(fileName);
  if (!input.is_open()) {
    wcout << L"Can't open file " << fileName << endl;
    throw string("Can't open file");
  }
  // –°—á–∏—Ç—ã–≤–∞–µ–º —Ä—é–∫–∑–∞–∫

  int n, W;
  input >> n >> W;
  wcout << "Number of items: " << n << ", max weight of backpack: " << W << "\nItems:\n";
  string s;
  getline(input, s);
  getline(input, s);


  vector<int> w(n); //–≤–µ—Å
  vector<int> c(n); //—Ü–µ–Ω–∞
  for (int i = 0; i < n; i++) {
    input >> w[i] >> c[i];
    wcout << i+1 << ": weight = " << w[i] << ", price = " << c[i] << "\n";
  }
  input.close();

  vector<vector<int>> d(n);
  for (int i = 0; i < n; i++) {
    d[i].resize(W+1, 0);
  }

  d[0][w[0]] = c[0];
  for (int i = 1; i < n; i++) {
    for (int j = 0; j <= W; j++) {
      if (j + w[i] <= W)
        d[i][j + w[i]] = max(d[i][j + w[i]], d[i - 1][j] + c[i]);
      d[i][j] = max(d[i][j], d[i - 1][j]);
    }
  }

  int ans = 0;
  for (int i = 0; i <= W; i++)
    ans = max(ans, d[n - 1][i]);
  wcout << "Answer: " << ans<<"\n";

  return ans;
}